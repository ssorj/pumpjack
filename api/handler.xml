<class name="handler">
  The Proton event handler.  It allows users to intercept and
  change Proton behaviors.

  <link node="event"/>
  <link node="/proton/core/container/constructor"/>
  <link node="/proton/core/endpoint-options/handler"/>

  <group name="common" title="Common-case application events">
    <method name="on-container-start">
      The container event loop is started.

      <link node="/proton/core/container/run"/>
      
      <input name="event" type="event"/>
      <input name="container" type="container"/>
    </method>

    <method name="on-container-stop" proposed="true">
      The container event loop is stopped.
      
      <link node="/proton/core/container/stop"/>
      
      <input name="event" type="event"/>
      <input name="container" type="container"/>
    </method>

    <method name="on-message">
      A message is received.

      <link node="/proton/core/sender/send"/>
      
      <input name="event" type="event"/>
      <input name="message" type="message"/>
    </method>

    <method name="on-sendable">
      A message can be sent.
      
      The sender has credit and messages can therefore be
      transferred.
      
      <link node="/proton/core/link-state/credit"/>
      <link node="/proton/core/sender/send"/>
      
      <input name="event" type="event"/>
      <input name="sender" type="sender"/>
    </method>

    <method name="on-unhandled">
      Fallback event handling.
      
      Called if an event handler function is not overriden to
      handle an event.

      <input name="event" type="event"/>
    </method>

    <method name="on-unhandled-error">
      Fallback error handling.
      
      Called if an error handler function is not overriden to
      handle an error.
      
      <input name="event" type="event"/>
      <input name="condition" type="condition"/>
    </method>
  </group>

  <group name="endpoint-state-group">
    <method name="on-connection-open">
      The remote peer opened the connection.

      <link node="/proton/core/container/connect"/>
      <link node="/proton/core/connection/open"/>
      
      <input name="event" type="event"/>
      <input name="connection" type="connection"/>
    </method>

    <method name="on-connection-close">
      The remote peer closed the connection.
      
      <link node="/proton/core/connection/close"/>

      <input name="event" type="event"/>
      <input name="connection" type="connection"/>
    </method>
      
    <method name="on-connection-error">
      The remote peer closed the connection with an error
      condition.
      
      <link node="/proton/core/connection/close"/>
      
      <input name="event" type="event"/>
      <input name="connection" type="connection"/>
    </method>

    <method name="on-session-open">
      The remote peer opened the session.
      
      <link node="/proton/core/session/open"/>
      
      <input name="event" type="event"/>
      <input name="session" type="session"/>
    </method>
    
    <method name="on-session-close">
      The remote peer closed the session.
      
      <link node="/proton/core/session/close"/>
      
      <input name="event" type="event"/>
      <input name="session" type="session"/>
    </method>

    <method name="on-session-error">
      The remote peer closed the session with an error
      condition.
      
      <link node="/proton/core/session/close"/>
      
      <input name="event" type="event"/>
      <input name="session" type="session"/>
    </method>

    <method name="on-sender-open">
      The remote peer opened the sender.
      
      <input name="event" type="event"/>
      <input name="sender" type="sender"/>
    </method>

    <method name="on-sender-detach" proposed="true">
      The remote peer detached the sender.
      
      <input name="event" type="event"/>
      <input name="sender" type="sender"/>
    </method>
     
    <method name="on-sender-close">
      The remote peer closed the sender.
      
      <input name="event" type="event"/>
      <input name="sender" type="sender"/>
    </method>
     
    <method name="on-sender-error">
      The remote peer closed the sender with an error condition.
      
      <input name="event" type="event"/>
      <input name="sender" type="sender"/>
    </method>

    <method name="on-receiver-open">
      The remote peer opened the receiver.
      
      <input name="event" type="event"/>
      <input name="receiver" type="receiver"/>
    </method>

    <method name="on-receiver-detach" proposed="true">
      The remote peer detached the receiver.
      
      <input name="event" type="event"/>
      <input name="receiver" type="receiver"/>
    </method>
     
    <method name="on-receiver-close">
      The remote peer closed the receiver.
      
      <input name="event" type="event"/>
      <input name="receiver" type="receiver"/>
    </method>
     
    <method name="on-receiver-error">
      The remote peer closed the receiver with an error condition.
      
      <input name="event" type="event"/>
      <input name="receiver" type="receiver"/>
    </method>
  </group>

  <group name="flow-control">
    <link node="/proton/core/receiver/flush"/>
    
    <method name="on-sender-flush" proposed="true">
      The remote end of the sender requested flushing.

      <input name="event" type="event"/>
      <input name="sender" type="sender"/>
    </method>
    
    <method name="on-receiver-flush" proposed="true">
      The remote end of the receiver finished flushing.
      
      <input name="event" type="event"/>
      <input name="receiver" type="receiver"/>
    </method>
  </group>

  <group name="delivery-state">
    <method name="on-delivery-accept">
      The remote peer accepted an outgoing message.
      
      <input name="event" type="event"/>
      <input name="delivery" type="delivery"/>
    </method>
    
    <method name="on-delivery-reject">
      The remote peer rejected an outgoing message.

      XXX error condition
      
      <input name="event" type="event"/>
      <input name="delivery" type="delivery"/>
    </method>
    
    <method name="on-delivery-release">
      The remote peer released an outgoing message.  Note that
      this may be in response to either the RELEASE or MODIFIED
      state as defined by the AMQP specification.
      
      <input name="event" type="event"/>
      <input name="delivery" type="delivery"/>
    </method>
    
    <method name="on-delivery-settle">
      The remote peer settled an outgoing message.  This is the
      point at which it should never be retransmitted.
      
      <input name="event" type="event"/>
      <input name="delivery" type="delivery"/>
    </method>
  </group>

  <group name="transport-state">
    <method name="on-transport-open">
      The underlying network channel opened.
      
      <input name="event" type="event"/>
      <input name="transport" type="transport"/>
    </method>
    
    <method name="on-transport-close">
      The underlying network channel closed.
      
      <input name="event" type="event"/>
      <input name="transport" type="transport"/>
    </method>
      
    <method name="on-transport-error">
      The underlying network channel closed with an error
      condition.
      
      <input name="event" type="event"/>
      <input name="transport" type="transport"/>
    </method>
  </group>

  <!--
  <group name="transactions">
    <method name="on-transaction-declare" experimental="true">
      The remote peer declared a transaction.
      
      <input name="event" type="event"/>
    </method>

    <method name="on-transaction-commit" experimental="true">
      The remote peer committed a transaction.
      
      <input name="event" type="event"/>
    </method>

    <method name="on-transaction-abort" experimental="true">
      The remote peer aborted a transaction.
      
      <input name="event" type="event"/>
    </method>
  </group>
  -->  
</class>
