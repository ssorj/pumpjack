<class name="handler">
  The Proton event handler.  It allows users to intercept and
  change Proton behaviors.

  <link node="/proton/core/container/constructor"/>

  <group name="common" title="Common-case application events">
    <method name="on-container-start">
      The container event loop is started.

      <link node="/proton/core/container/run"/>
      
      <input type="container"/>
    </method>

    <method name="on-container-stop" proposed="true">
      The container event loop is stopped.
      
      <link node="/proton/core/container/stop"/>
      
      <input type="container"/>
    </method>

    <method name="on-message">
      A message is received.

      <link node="/proton/core/sender/send"/>
      
      <input type="delivery"/>
      <input type="message"/>
    </method>

    <method name="on-sendable">
      A message can be sent.
      
      The sender has credit and messages can therefore be
      transferred.
      
      <link node="/proton/core/link/credit"/>
      <link node="/proton/core/sender/send"/>
      
      <input type="sender"/>
    </method>
  </group>

  <group name="endpoint-lifecycle">
    <method name="on-connection-open">
      The remote peer opened the connection.

      <link node="/proton/core/container/connect"/>
      <link node="/proton/core/connection/open"/>
      
      <input type="connection"/>
    </method>

    <method name="on-connection-close">
      The remote peer closed the connection.
      
      <link node="/proton/core/connection/close"/>

      <input type="connection"/>
    </method>
      
    <method name="on-connection-error">
      The remote peer closed the connection with an error
      condition.
      
      <link node="/proton/core/connection/close"/>
      
      <input type="connection"/>
    </method>

    <method name="on-session-open">
      The remote peer opened the session.
      
      <link node="/proton/core/session/open"/>
      
      <input type="session"/>
    </method>
    
    <method name="on-session-close">
      The remote peer closed the session.
      
      <link node="/proton/core/session/close"/>
      
      <input type="session"/>
    </method>

    <method name="on-session-error">
      The remote peer closed the session with an error
      condition.
      
      <link node="/proton/core/session/close"/>
      
      <input type="session"/>
    </method>

    <method name="on-sender-open">
      The remote peer opened the sender.
      
      <input type="sender"/>
    </method>

    <method name="on-sender-detach" proposed="true">
      The remote peer detached the sender.
      
      <input type="sender"/>
    </method>
     
    <method name="on-sender-close">
      The remote peer closed the sender.
      
      <input type="sender"/>
    </method>
     
    <method name="on-sender-error">
      The remote peer closed the sender with an error condition.
      
      <input type="sender"/>
    </method>

    <method name="on-receiver-open">
      The remote peer opened the receiver.
      
      <input type="receiver"/>
    </method>

    <method name="on-receiver-detach" proposed="true">
      The remote peer detached the receiver.
      
      <input type="receiver"/>
    </method>
     
    <method name="on-receiver-close">
      The remote peer closed the receiver.
      
      <input type="receiver"/>
    </method>
     
    <method name="on-receiver-error">
      The remote peer closed the receiver with an error condition.
      
      <input type="receiver"/>
    </method>
  </group>

  <group name="deliveries" title="Deliveries">
    <method name="on-delivery" hidden="true">
      The sending end delivered a message.

      <link node="/proton/core/sender/send"/>
      
      <input type="delivery"/>
    </method>
    
    <method name="on-tracker-accept">
      The receiving end accepted a delivery.
      
      <input type="tracker"/>
    </method>
    
    <method name="on-tracker-reject">
      The receiving end rejected a delivery.

      <!-- XXX error condition -->
      
      <input type="tracker"/>
    </method>
    
    <method name="on-tracker-release">
      The receiving end released a delivery.

      Note that this may be in response to either the RELEASE or
      MODIFIED state as defined by the AMQP specification.
      
      <input type="tracker"/>
    </method>

    <method name="on-tracker-settle">
      The receiving end settled a delivery.
      
      <input type="tracker"/>
    </method>

    <method name="on-delivery-settle">
      The sending end settled a delivery.
      
      <input type="delivery"/>
    </method>
  </group>

  <group name="flow-control">
    <link node="/proton/core/receiver/flush"/>
    
    <method name="on-sender-flush" proposed="true">
      The remote end of the sender requested flushing.

      <input type="sender"/>
    </method>
    
    <method name="on-receiver-flush" proposed="true">
      The remote end of the receiver finished flushing.
      
      <input type="receiver"/>
    </method>
  </group>

  <group name="errors">
    <method name="on-error">
      The fallback error handler.
      
      Called if a more specific error handler is not overriden.
      
      <input type="error-condition"/>
    </method>
  </group>

  <group name="transport-lifecycle" title="Transport lifecycle">
    <method name="on-transport-open">
      The underlying network channel opened.
      
      <input type="transport"/>
    </method>
    
    <method name="on-transport-close">
      The underlying network channel closed.
      
      <input type="transport"/>
    </method>
      
    <method name="on-transport-error">
      The underlying network channel closed with an error
      condition.
      
      <input type="transport"/>
    </method>
  </group>

  <!--
  <group name="transactions">
    <method name="on-transaction-declare" experimental="true">
      The remote peer declared a transaction.
    </method>

    <method name="on-transaction-commit" experimental="true">
      The remote peer committed a transaction.
    </method>

    <method name="on-transaction-abort" experimental="true">
      The remote peer aborted a transaction.
    </method>
  </group>
  -->  
</class>
