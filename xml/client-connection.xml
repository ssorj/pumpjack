<class name="connection" type="/proton/client/endpoint">
  A channel for communication between two peers on a network.

  In current implementations, a connection corresponds to a TCP
  connection, represented by a transport.

  A connection object contains zero or more session objects, which in
  turn contain zero or more senders and zero or more receivers.

  <group name="basic">
    <property name="default-session" type="session" value="[instance]">
      The session used by `open-sender()` and `open-receiver()`.
    </property>

    <property name="default-sender" type="session" value="[instance]">
      The sender used by `connection.send()`.
    </property>
</group>

  <group name="link-operations">
    <method name="open-sender">
      Create and open a sender using the default session.

      Use `wait()` to block until the remote peer confirms the open.

      <input name="address" type="string"/>
      <input type="sender-options" optional="true"/>
      <!-- <input name="on-delivery" type="function" optional="true"/> -->
      <output type="/proton/client/sender"/>
    </method>

    <method name="open-anonymous-sender">
      Create and open a sender with no target address using the default session.

      Use `wait()` to block until the remote peer confirms the open.

      <input type="sender-options" optional="true"/>
      <!-- <input name="on-delivery" type="function" optional="true"/> -->
      <output type="/proton/client/sender"/>
    </method>

    <method name="open-receiver">
      Create and open a receiver using the default session.

      Use `wait()` to block until the remote peer confirms the open.

      <input name="address" type="string"/>
      <input type="receiver-options" optional="true"/>
      <!-- <input name="on-delivery" type="function" optional="true"/> -->
      <output type="/proton/client/receiver"/>
    </method>

    <method name="open-dynamic-receiver">
      Create and open a dynamic receiver using the default session.

      **Blocking**

      This method blocks until the open operation is complete.

      <input type="receiver-options" optional="true"/>
      <input name="timeout" type="duration" optional="true"/>
      <!-- <input name="on-delivery" type="function" optional="true"/> -->
      <output type="/proton/client/receiver"/>
    </method>

    <method name="(async) open-dynamic-receiver">
      Create and open a dynamic receiver using the default session.

      <input type="receiver-options" optional="true"/>
      <!-- <input name="on-delivery" type="function" optional="true"/> -->
      <output type="task" item-type="/proton/client/receiver"/>
    </method>
  </group>

  <group name="session-operations" title="Session operations">
    <method name="open-session">
      Create and open a session.

      Use `wait()` to block until the remote peer confirms the open.

      <input type="session-options" optional="true"/>
      <output type="/proton/client/session"/>
    </method>
  </group>

  <group name="message-operations">
    <method name="send">
      Send a message using the default session and default sender.
      The message 'to' field must be set.

      <input type="message"/>
      <!-- <input name="on-delivery" type="function" optional="true"/> -->
      <output type="future" item-type="tracker"/>
    </method>

    <method name="(async) send">
      Send a message using the default session and default sender.
      The message 'to' field must be set.

      <input type="message"/>
      <input name="timeout" type="duration" optional="true"/>
      <!-- <input name="on-delivery" type="function" optional="true"/> -->
      <output type="task" item-type="tracker"/>
    </method>
  </group>
</class>
