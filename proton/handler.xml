<class name="handler">
  The Proton event handler.  It allows users to intercept and
  change Proton behaviors.

  <link node="@event"/>

  <group name="common" title="Common application events">
    <method name="on-start">
      The event loop is started.
      
      <input name="event" type="@event"/>
      <input name="container" type="@container" value="[instance]" nullable="true"/>
    </method>

    <method name="on-stop" proposed="true">
      The event loop is stopped.
      
      <input name="event" type="@event"/>
      <input name="container" type="@container" value="[instance]" nullable="true"/>
    </method>

    <method name="on-message">
      A message is received.
      
      <input name="event" type="@event"/>
      <input name="message" type="@message" value="[instance]" nullable="true"/>
    </method>

    <method name="on-sendable">
      A message can be sent.
      
      The sender has credit and messages can therefore be
      transferred.
      
      <input name="event" type="@event"/>
      <input name="sender" type="@sender" value="[instance]" nullable="true"/>
    </method>

    <method name="on-unhandled">
      Fallback event handling.
      
      Called if an event handler function is not overriden to
      handle an event.

      <input name="event" type="@event"/>
    </method>

    <method name="on-unhandled-error">
      Fallback error handling.
      
      Called if an error handler function is not overriden to
      handle an error.
      
      <input name="event" type="@event"/>
      <input name="condition" type="@condition" value="[instance]" nullable="true"/>
    </method>
  </group>

  <group name="endpoint-state-group">
    <method name="on-connection-open">
      The remote peer opened the connection.
      
      <input name="event" type="@event"/>
      <input name="connection" type="@connection" value="[instance]" nullable="true"/>
    </method>

    <method name="on-connection-close">
      The remote peer closed the connection.
      
      <input name="event" type="@event"/>
      <input name="connection" type="@connection" value="[instance]" nullable="true"/>
    </method>
      
    <method name="on-connection-error">
      The remote peer closed the connection with an error
      condition.
      
      <input name="event" type="@event"/>
      <input name="connection" type="@connection" value="[instance]" nullable="true"/>
    </method>

    <method name="on-session-open">
      The remote peer opened the session.
      
      <input name="event" type="@event"/>
      <input name="session" type="@session" value="[instance]" nullable="true"/>
    </method>
    
    <method name="on-session-close">
      The remote peer closed the session.
      
      <input name="event" type="@event"/>
      <input name="session" type="@session" value="[instance]" nullable="true"/>
    </method>

    <method name="on-session-error">
      The remote peer closed the session with an error
      condition.
      
      <input name="event" type="@event"/>
      <input name="session" type="@session" value="[instance]" nullable="true"/>
    </method>

    <method name="on-link-open">
      The remote peer opened the link.
      
      <input name="event" type="@event"/>
      <input name="link" type="@link" value="[instance]" nullable="true"/>
    </method>

    <method name="on-link-detach" proposed="true">
      The remote peer detached the link.
      
      <input name="event" type="@event"/>
      <input name="link" type="@link" value="[instance]" nullable="true"/>
    </method>
     
    <method name="on-link-close">
      The remote peer closed the link.
      
      <input name="event" type="@event"/>
      <input name="link" type="@link" value="[instance]" nullable="true"/>
    </method>
     
    <method name="on-link-error">
      The remote peer closed the link with an error condition.
      
      <input name="event" type="@event"/>
      <input name="link" type="@link" value="[instance]" nullable="true"/>
    </method>
  </group>

  <group name="flow-control">
    <link node="@/proton/core/receiver/flush"/>
    <link node="@/proton/core/sender/flushing"/>
    
    <method name="on-sender-flush" proposed="true">
      The remote end of the sender requested flushing.

      <input name="event" type="@event"/>
      <input name="sender" type="@sender" value="[instance]" nullable="true"/>
    </method>
    
    <method name="on-receiver-flush" proposed="true">
      The remote end of the receiver finished flushing.
      
      <input name="event" type="@event"/>
      <input name="receiver" type="@receiver" value="[instance]" nullable="true"/>
    </method>
  </group>

  <group name="delivery-state">
    <method name="on-delivery-accept">
      The remote peer accepted an outgoing message.
      
      <input name="event" type="@event"/>
      <input name="delivery" type="@delivery" value="[instance]" nullable="true"/>
    </method>
    
    <method name="on-delivery-reject">
      The remote peer rejected an outgoing message.

      XXX error condition
      
      <input name="event" type="@event"/>
      <input name="delivery" type="@delivery" value="[instance]" nullable="true"/>
    </method>
    
    <method name="on-delivery-release">
      The remote peer released an outgoing message.  Note that
      this may be in response to either the RELEASE or MODIFIED
      state as defined by the AMQP specification.
      
      <input name="event" type="@event"/>
      <input name="delivery" type="@delivery" value="[instance]" nullable="true"/>
    </method>
    
    <method name="on-delivery-settle">
      The remote peer settled an outgoing message.  This is the
      point at which it should never be retransmitted.
      
      <input name="event" type="@event"/>
      <input name="delivery" type="@delivery" value="[instance]" nullable="true"/>
    </method>
  </group>

  <group name="transport-state">
    <method name="on-transport-close">
      The underlying network channel closed.
      
      <input name="event" type="@event"/>
      <input name="transport" type="@transport" value="[instance]" nullable="true"/>
    </method>
      
    <method name="on-transport-error">
      The underlying network channel closed with an error
      condition.
      
      <input name="event" type="@event"/>
      <input name="transport" type="@transport" value="[instance]" nullable="true"/>
    </method>
  </group>

  <!--
  <group name="transactions">
    <method name="on-transaction-declare" experimental="true">
      The remote peer declared a transaction.
      
      <input name="event" type="@event"/>
    </method>

    <method name="on-transaction-commit" experimental="true">
      The remote peer committed a transaction.
      
      <input name="event" type="@event"/>
    </method>

    <method name="on-transaction-abort" experimental="true">
      The remote peer aborted a transaction.
      
      <input name="event" type="@event"/>
    </method>
  </group>
  -->  
</class>
