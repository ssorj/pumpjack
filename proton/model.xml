<?xml version="1.0"?>
<model name="proton" title="Qpid Proton">
  Qpid Proton is an event-driven messaging API for building clients,
  brokers, and more.  It uses the AMQP 1.0 wire protocol, so it can
  exchange messages with other components that use the same open
  internet standard.  The Proton API is available in many popular
  programming languages.

  <link href="{{{{site_url}}}}/overview.html">Overview</link>
  <link href="http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-overview-v1.0-os.html">AMQP specification</link>
  <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/c/api/">C</link>
  <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/cpp/api/">C++</link>
  <link href="https://github.com/apache/qpid-proton/tree/master/proton-c/bindings/go">Go</link>
  <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/java/api/">Java</link>
  <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/python/api/">Python</link>
  <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/python/book/overview.html">Python overview</link>
  
  <module name="core">
    The primary entry point for the event-driven API. Most
    applications will import only this module.

    <annotation name="requires">amqp</annotation>

    <group name="model" title="AMQP model">
      <class name="container">
        A top-level container of connections, sessions, and links.

        A container gives a unique identity to each communicating
        peer.  It is often a process-level object.

        It serves as an entry point to the API, allowing connections
        and links to be established.  It can be supplied with an event
        handler in order to intercept important messaging events, such
        as newly received messages or newly issued link credit for
        sending messages.

        <link href="http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#doc-idp2176">AMQP definition</link>
        <link href="http://qpid.apache.org/releases/qpid-proton-master/proton/c/api/container_8h.html">C</link>
        <link href="http://qpid.apache.org/releases/qpid-proton-master/proton/cpp/api/classproton_1_1container.html">C++</link>
        <link href="http://qpid.apache.org/releases/qpid-proton-master/proton/python/api/proton.reactor.Container-class.html">Python</link>
        
        <group name="basic">
          <property name="id" value="[generated]" type="string">
            A globally unique container identifier.  It is used to
            identify this container in any connections it establishes.
          </property>

          <property name="event-loop" value="[instance]" type="@event-loop">
            The underlying event loop for this container.
          </property>

          <property name="event-handler" value="[instance]" type="@event-handler" nullable="true">
            The main event handler.
          </property>

          <method name="[constructor]">
            Create a new container.

            <input name="handler" type="@event-handler" nullable="true">
              The main event handler for this container.
            </input>
            
            <input name="id" value="[generated]" type="string" nullable="true">
              Identifiers should be unique.  By default a UUID will be
              used.
            </input>

            <output name="container" type="@container"/>
          </method>

          <method name="run">
            Start processing events.  It returns when all connections
            and acceptors are closed.

            <link node="@/proton/core/endpoint/close"/>
            <link node="@acceptor"/>
          </method>

          <method name="connect">
            Initiate the establishment of an AMQP connection.

            [?] How do we know when the operation is complete?
            on-connection-open?
            
            <input name="url" type="@url"/>
            <output name="connection" type="@connection"/>
            <input name="options" value="[empty list]" type="list" item-type="@connection-option"/>
            <input name="handler" type="@event-handler" nullable="true"/>
          </method>
          
          <method name="listen">
            Initiate a server socket, accepting incoming AMQP
            connections.
            
            <input name="url" type="@url"/>
            <input name="options" value="[empty list]" type="list" item-type="@connection-option"/>
            <input name="handler" type="@event-handler" nullable="true"/>
            <output name="acceptor" type="@acceptor"/>
          </method>
        </group>

        <group name="link-operations">
          <method name="open-receiver">
            Create and initiate opening of a receiving link.
            
            <input name="url" type="@url"/>
            <input name="options" value="[empty list]" type="list" item-type="@link-option"/>
            <input name="handler" type="@event-handler" nullable="true"/>
            <output name="receiver" type="@receiver"/>
          </method>

          <method name="open-sender">
            Create and initiate opening of a sending link.

            <input name="url" type="@url"/>
            <input name="options" value="[empty list]" type="list" item-type="@link-option"/>
            <input name="handler" type="@event-handler" nullable="true"/>
            <output name="sender" type="@sender"/>
          </method>
        </group>
      </class>

      <class name="endpoint">
        The base class for session, connection, and link.

        Every AMQP endpoint starts out in an uninitialized state and
        then proceeds linearly to an active and then closed state.
        This lifecycle occurs at both endpoints involved, and so the
        state model for an endpoint includes not only the known local
        state but also the last known state of the remote endpoint.

        The local and remote peers each maintain a set of
        corresponding local and remote endpoints.  Each peer evaluates
        and reconciles remote endpoint state changes as they are
        communicated over the wire.

        <link href="http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#doc-idp48736">AMQP definition</link>
        <link href="http://qpid.apache.org/releases/qpid-proton-master/proton/c/api/connection_8h.html">C</link>
        <link href="http://qpid.apache.org/releases/qpid-proton-master/proton/cpp/api/classproton_1_1endpoint.html">C++</link>
        <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/java/api/org/apache/qpid/proton/engine/Endpoint.html">Java</link>
        <link href="http://qpid.apache.org/releases/qpid-proton-master/proton/python/api/proton.Endpoint-class.html">Python</link>

        <group name="basic">
          <method name="open">
            Initiate endpoint open.

            This moves the local state of the endpoint to ACTIVE and
            triggers an opening frame to be sent to the peer.  An
            endpoint is fully active once both peers have opened it.

            [?] How is ^^ reflected in the API?
          </method>

          <method name="close">
            Initiate endpoint close.

            This moves the local state of the endpoint to CLOSED and
            triggers a closing frame to be sent to the peer.  An
            endpoint is fully shut down once both peers have closed
            it.

            [?] How is ^^ reflected in the API?
          </method>
        </group>

        <group name="endpoint-state">
          <property name="local-state" type="@endpoint-state" value="UNINITIALIZED">
            Local endpoint state.
          </property>

          <property name="remote-state" type="@endpoint-state" value="UNINITIALIZED">
            Remote endpoint state.
          </property>

          <property name="local-condition" type="@condition" value="[instance]">
            The error condition of the local peer.
          </property>
          
          <property name="remote-condition" type="@condition" value="[instance]">
            The error condition of the remote peer.
          </property>
        </group>
      </class>

      <class name="endpoint-state" hidden="true">
        Endpoint state values.

        <group name="basic">
          <property name="UNINITIALIZED" type="@endpoint-state" value="[singleton]">
            The endpoint is uninitialized.
          </property>

          <property name="ACTIVE" type="@endpoint-state" value="[singleton]">
            The endpoint is active.
          </property>

          <property name="CLOSED" type="@endpoint-state" value="[singleton]">
            The endpoint is closed.
          </property>
        </group>
      </class>
      
      <class name="connection" type="@endpoint">
        The basis for network communication; it contains sessions.  It
        typically corresponds to a TCP connection.

        A connection object contains zero or more session objects,
        which in turn contain zero or more link objects.  Each link
        object contains an ordered sequence of delivery objects.

        <!--
        The connection is the basis for discovering endpoint and
        delivery state changes.
        -->

        <!-- What behaviors do you get by default? -->
        
        <link href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#section-connections">AMQP definition</link>
        <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/c/api/connection_8h.html">C</link>
        <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/cpp/api/classproton_1_1connection.html">C++</link>
        <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/java/api/org/apache/qpid/proton/engine/Connection.html">Java</link>
        <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/python/api/proton.Connection-class.html">Python</link>

        <group name="basic">
          <property name="hostname" type="string" mutable="true">
            The name of the remote peer.
          </property>

          <property name="user" type="string" mutable="true" nullable="true">
            The user name for authentication.
          </property>

          <property name="password" type="string" mutable="true" nullable="true">
            The password for authentication.
          </property>

          <property name="container" type="@container" value="[instance]">
            The container which holds this connection.
          </property>

          <property name="transport" type="@transport" value="[instance]">
            The associated transport.
          </property>

          <method name="send">
            Send a message on the default session.

            <input name="message" type="@message"/>
            <input name="address" type="string" nullable="true"/>
            <output name="delivery" type="@delivery"/>
          </method>
        </group>

        <group name="link-operations">
          <method name="open-sender">
            Create and open a sender using the default session.

            <input name="address" type="string"/>
            <input name="options" value="[empty list]" type="list" item-type="@link-option"/>
            <input name="handler" type="@event-handler" nullable="true"/>
            <output name="sender" type="@sender"/>
          </method>

          <method name="open-receiver">
            Create and open a receiver using the default session.

            <input name="address" type="string"/>
            <input name="options" value="[empty list]" type="list" item-type="@link-option"/>
            <input name="handler" type="@event-handler" nullable="true"/>
            <output name="receiver" type="@receiver"/>
          </method>
        </group>

        <group name="session-operations" title="Session operations">
          <property name="default-session" type="@session" value="[instance]">
            The session used by open-sender and open-receiver.
          </property>

          <method name="open-session">
            Create and initiate opening the session.

            <input name="options" value="[empty list]" type="list" item-type="session-option"/>
            <input name="handler" type="@event-handler" nullable="true"/>
            <output name="session" type="@session"/>
          </method>
        </group>
        
        <group name="endpoint-state">
          <property name="remote-container-id" type="string" value="[discovered]">
            The unique identity of the remote container.
          </property>
          
          <property name="remote-hostname" type="string" value="[discovered]">
            The hostname of the remote peer.
          </property>

          <property name="remote-properties" type="map" value="[discovered]">
          </property>
        </group>

        <group name="event-processing">
          <method name="find-sessions">
            Find session endpoints in the specified states.  The
            results are scoped to sessions on this connection.
            
            <input name="local-states" type="list" item-type="@endpoint-state"/>
            <input name="remote-states" type="list" item-type="@endpoint-state"/>
            <output name="results" type="iterator" item-type="@session"/>
          </method>

          <method name="find-links">
            Find link endpoints in the specified states.  The results
            are scoped to links on this connection.

            <input name="local-states" type="list" item-type="@endpoint-state"/>
            <input name="remote-states" type="list" item-type="@endpoint-state"/>
            <output name="results" type="iterator" item-type="@link"/>
          </method>

          <method name="find-deliveries">
            Find deliveries in the specified states.  The results
            are scoped to deliveries on this connection.

            <input name="updated" type="boolean"/>
            <input name="readable" type="boolean"/>
            <input name="writable" type="boolean"/>
            <output name="results" type="iterator" item-type="@delivery"/>
          </method>
        </group>

        <group name="extended-attributes">
          <property name="local-offered-capabilities" type="list [?]">
            Extensions the local peer supports.
          </property>
          
          <property name="local-desired-capabilities" type="list">
            Extensions the local peer can use.
          </property>

          <property name="remote-offered-capabilities" value="[discovered]" type="list">
            Extensions the remote peer supports.
          </property>
          
          <property name="remote-desired-capabilities" value="[discovered]" type="list">
            Extensions the remote peer can use.
          </property>
        </group>
      </class>

      <class name="acceptor">
        A channel for accepting incoming connections.

        <link node="@/proton/core/container/listen"/>

        <group name="basic">
          <method name="close"/>
        </group>
      </class>

      <class name="session" type="@endpoint">
        A container of links.

        <link href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#section-sessions">AMQP definition</link>
        <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/c/api/session_8h.html">C</link>
        <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/cpp/api/classproton_1_1session.html">C++</link>
        <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/java/api/org/apache/qpid/proton/engine/Session.html">Java</link>
        <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/python/api/proton.Session-class.html">Python</link>
        
        <group name="basic">
          <property name="connection" type="@connection" value="[instance]">
            The containing connection.
          </property>
        </group>

        <group name="link-operations">
          <method name="open-receiver">
            Create and initiate opening of a receiving link.
            
            <input name="address" type="string"/>
            <input name="options" value="[empty list]" type="list" item-type="@link-option"/>
            <input name="handler" type="@event-handler" nullable="true"/>
            <output name="receiver" type="@receiver"/>
          </method>

          <method name="open-sender">
            Create and initiate opening of a sending link.

            <input name="address" type="string"/>
            <input name="options" value="[empty list]" type="list" item-type="@link-option"/>
            <input name="handler" type="@event-handler" nullable="true"/>
            <output name="sender" type="@sender"/>
          </method>
        </group>

        <group name="flow-control">
          <property name="incoming-bytes" type="integer"/>
          <property name="outgoing-bytes" type="integer"/>
        </group>

        <group name="event-processing">
          <method name="find-links">
            Find link endpoints in the specified states.  The results
            are scoped to links on this session.

            <input name="local-states" type="list" item-type="@endpoint-state"/>
            <input name="remote-states" type="list" item-type="@endpoint-state"/>
            <output name="results" type="iterator" item-type="@link"/>
          </method>

          <method name="find-deliveries">
            Find deliveries in the specified states.  The results
            are scoped to deliveries on this session.

            <input name="updated" type="boolean"/>
            <input name="readable" type="boolean"/>
            <input name="writable" type="boolean"/>
            <output name="results" type="iterator" item-type="@delivery"/>
          </method>
        </group>
      </class>
      
      <class name="link" type="@endpoint">
        A named channel for sending or receiving messages.  A link can
        be a sender or a receiver, but never both.  A link contains an
        ordered sequence of delivery objects.

        <link href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#section-links">AMQP definition</link>
        <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/c/api/link_8h.html">C</link>
        <link href="http://qpid.apache.org/releases/qpid-proton-master/proton/cpp/api/classproton_1_1link.html">C++</link>
        <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/java/api/org/apache/qpid/proton/engine/Link.html">Java</link>
        <link href="http://qpid.apache.org/releases/qpid-proton-master/proton/python/api/proton.Link-class.html">Python</link>

        <group name="basic">
          <property name="name" type="string" value="[generated]">
            The link name.
          </property>

          <property name="options" type="list" item-type="@link-option" value="[empty list]">
            Link options.
          </property>

          <property name="session" type="@session" value="[instance]">
            The containing session
          </property>
        </group>

        <group name="termini" title="Source and target">
          <property name="local-source" type="@terminus" value="[instance]">
            The source terminus of the local peer.
          </property>

          <property name="local-target" type="@terminus" value="[instance]">
            The target terminus of the local peer.
          </property>

          <property name="remote-source" type="@terminus" value="[instance]">
            The source terminus of the remote peer.
          </property>

          <property name="remote-target" type="@terminus" value="[instance]">
            The target terminus of the remote peer.
          </property>
        </group>

        <group name="flow-control">
          <property name="credit" type="integer" value="[discovered]">
            The amount of outstanding credit on the link.
          </property>
        </group>

        <group name="event-processing">
          <method name="find-deliveries">
            Find deliveries in the specified states.  The results
            are scoped to deliveries on this session.

            <input name="updated" type="boolean"/>
            <input name="readable" type="boolean"/>
            <input name="writable" type="boolean"/>
            <output name="results" type="iterator" item-type="@delivery"/>
          </method>
        </group>

        <!-- XXX queued -->
      </class>

      <class name="receiver" type="@link">
        A link for receiving messages

        <group name="basic">
          <method name="recv"/>
        </group>
        
        <group name="flow-control">
          <method name="flow">
            Issue credit on the link.  This increases the credit
            issued to the remote sender by the specified number of
            messages.

            <input name="count" type="integer"/>
          </method>

          <method name="drain"/>
          <method name="draining [?]"/>
        </group>
      </class>
      
      <class name="sender" type="@link">
        A link for sending messages.

        <group name="basic">
          <method name="send">
            Send a message on the link.

            <input name="message" type="@message"/>
            <output name="delivery" type="@delivery"/>
          </method>
        </group>

        <group name="flow-control">
          <method name="offer [offered?]">
            <input name="count" type="integer"/>
          </method>
        </group>
      </class>
      
      <class name="terminus">
        One end of a link, either a source or a target.

        <link href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#section-addressing">AMQP definition</link>
        <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/c/api/terminus_8h.html">C</link>
        <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/cpp/api/classproton_1_1terminus.html">C++</link>
        <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/python/api/proton.Terminus-class.html">Python</link>
        
        <group name="basic">
          <property name="type" type="@terminus-type" mutable="true"/>
          <property name="address" type="string" mutable="true"/>
          <property name="durability" type="@terminus-durability" mutable="true"/>

          <property name="default-outcome" type="symbol">
            The default delivery state.  It indicates the outcome to
            be used for transfers that have not reached a terminal
            state at the receiver when the transfer is settled,
            including when the source is destroyed.
          </property>

          <property name="outcomes" type="list" item-type="symbol">
            The delivery states allowed for this terminus.
          </property>
        </group>

        <group name="distribution" title="Message distribution">
          <property name="distribution-mode" type="@distribution-mode" mutable="true"/>
          <property name="filter" mutable="true"/>
        </group>

        <group name="dynamic-nodes" title="Dynamic node creation">
          <property name="dynamic" type="boolean" mutable="true">
            Request creation of a remote node.
          </property>
          
          <property name="dynamic-node-properties" type="map">
            Properties of the created node.
          </property>
        </group>

        <group name="terminus-expiration" title="Terminus expiration">
          <property name="expiry-policy" type="@expiry-policy" mutable="true"/>
          <property name="timeout" mutable="true"/>
        </group>
        
        <group name="extended-attributes">
          <property name="capabilities" type="list">
            Extensions supported or desired.
          </property>
        </group>
      </class>

      <class name="terminus-type" hidden="true">
        <group name="basic">
          <property name="UNSPECIFIED" type="@terminus-type" value="[singleton]"/>
          <property name="SOURCE" type="@terminus-type" value="[singleton]"/>
          <property name="TARGET" type="@terminus-type" value="[singleton]"/>
          <property name="COORDINATOR" type="@terminus-type" value="[singleton]"/>
        </group>
      </class>

      <class name="terminus-durability" hidden="true">
        <group name="basic">
          <property name="NONE" type="@terminus-durability" value="[singleton]"/>
          <property name="CONFIGURATION" type="@terminus-durability" value="[singleton]"/>
          <property name="UNSETTLED-STATE" type="@terminus-durability" value="[singleton]"/>
        </group>
      </class>

      <class name="distribution-mode" hidden="true">
        <group name="basic">
          <property name="UNSPECIFIED" type="@distribution-mode" value="[singleton]"/>
          <property name="COPY" type="@distribution-mode" value="[singleton]"/>
          <property name="MOVE" type="@distribution-mode" value="[singleton]"/>
        </group>
      </class>
      
      <class name="expiry-policy" hidden="true">
        **XXX why are these completely different from the spec?**

        <link href="http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-terminus-expiry-policy">AMQP definition</link>
        
        <group name="basic">
          <property name="NONDURABLE" type="@expiry-policy" value="[singleton]"/>
          <property name="CONFIGURATION" type="@expiry-policy" value="[singleton]"/>
          <property name="DELIVERIES" type="@expiry-policy" value="[singleton]"/>
        </group>
      </class>
      
      <class name="condition">
        An endpoint error state.

        <link href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#type-amqp-error">AMQP definition</link>
        <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/c/api/condition_8h.html">C</link>
        <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/python/api/proton.Condition-class.html">Python</link>

        <group name="basic">
          <property name="name" mutable="true"/>
          <property name="description" mutable="true"/>
        </group>
      </class>
      
      <class name="delivery">
        A message transfer.  Every delivery exists within the context
        of a link.

        A delivery attempt can fail.  As a result, a particular
        message may correspond to multiple deliveries.

        <link href="{{{{site_url}}}}/delivery-guarantees.html">Delivery guarantees</link>
        <link href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#type-transfer">AMQP definition</link>
        <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/c/api/group__delivery.html">C</link>
        <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/cpp/api/classproton_1_1delivery.html">C++</link>
        <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/java/api/org/apache/qpid/proton/engine/Delivery.html">Java</link>
        <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/python/api/proton.Delivery-class.html">Python</link>
        
        <group name="basic">
          <property name="id" type="bytes" value="[generated]">
            The delivery identifier.
          </property>

          <property name="link" value="[instance]" type="@link">
            The link on which the delivery was sent or received.
          </property>
        </group>

        <group name="settlement" title="Settlement">
          Settlement state governs how long a message transfer is
          tracked at the local and remote peers, and when each can
          safely consider the transfer resolved, that is "settled".
          
          <property name="local-settled" value="false" type="boolean">
            True if the delivery has been settled locally.
          </property>
          
          <property name="remote-settled" value="false" type="boolean">
            True if the delivery has been settled by the remote peer.
          </property>

          <method name="settle">
            Mark the delivery settled.  A settled delivery can never
            be used again.
          </method>
        </group>

        <group name="delivery-state" title="Delivery state">
          Delivery states represent the current status or final
          outcome of a message transfer. Every delivery contains both
          a local and a remote delivery state.  The remote state
          indicates the last known remote state of the delivery.
          
          <link href="http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#section-delivery-state">AMQP defintion</link>
          
          <property name="local-state " value="NONE [?]" type="@delivery-state" mutable="true">
            The local delivery state.
          </property>
          
          <property name="remote-state" value="NONE [?]" type="@delivery-state">
            The delivery state at the remote peer.
          </property>
          
          <property name="NONE" value="[singleton]" type="@delivery-state">
            The initial state before any delivery data is transferred.
          </property>
          
          <property name="RECEIVED" value="[singleton]" type="@delivery-state">
            A non-terminal state indicating data has been received.
          </property>

          <property name="ACCEPTED" value="[singleton]" type="@delivery-state">
            The delivery was successfully processed; terminal.
          </property>

          <property name="REJECTED" value="[singleton]" type="@delivery-state">
            The delivery was invalid; terminal.
          </property>

          <property name="RELEASED" value="[singleton]" type="@delivery-state">
            The delivery is returned to the sender; terminal.
          </property>

          <property name="MODIFIED" value="[singleton]" type="@delivery-state">
            The delivery is returned to the sender for annotation
            before further delivery attempts; terminal.
          </property>

          <method name="accept">
            Change the delivery state to ACCEPTED.
          </method>

          <method name="reject">
            Change the delivery state to REJECTED.
          </method>

          <method name="release">
            Change the delivery state to RELEASED.
          </method>
          
          <method name="modify">
            Change the delivery state to MODIFIED.
          </method>

          <!-- <method name="send-update" -->
        </group>

        <group name="event-processing">
          <property name="updated" type="boolean">
          </property>

          <property name="readable" type="boolean">
          </property>

          <property name="writable" type="boolean">
          </property>
        </group>
      </class>

      <class name="delivery-state" hidden="true">
        Delivery state values
      </class>

      <class name="message">
        A mutable holder of application content.

        <!-- XXX a message is a value object -->

        <link href="https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#section-message-format">AMQP definition</link>
        <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/c/api/message_8h.html">C</link>
        <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/cpp/api/classproton_1_1message.html">C++</link>
        <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/java/api/org/apache/qpid/proton/message/Message.html">Java</link>
        <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/python/api/proton.Message-class.html">Python</link>

        <group name="basic">
          <property name="id" mutable="true" nullable="true">
            A globally unique message identifier.

            <!-- XXX used to remove duplicates -->
          </property>

          <property name="user-id" type="string" mutable="true" nullable="true">
            The identity of the user producing the message.
          </property>
          
          <method name="[constructor]">
            Create a new message.

            <input name="body" type="[?]"/>
            <output name="message" type="@message"/>
          </method>
          <method name="clear">
            Clear the content of the message.  All fields are reset to
            their default values.
          </method>
          <method name="encode">
            Encode the message to bytes.

            <output name="bytes" type="bytes"/>
          </method>
          <method name="decode">
            Decode the message from bytes.
            
            <input name="bytes" type="bytes"/>
          </method>
        </group>

        <group name="routing" title="Routing">
          <property name="address" mutable="true"/>
          <property name="reply-to" mutable="true" nullable="true"/>
          <property name="correlation-id" mutable="true" nullable="true"/>
        </group>

        <group name="content" title="Content">
          <property name="subject" mutable="true" nullable="true"/>
          <property name="body" mutable="true" nullable="true"/>
          <property name="content-encoding" mutable="true" nullable="true"/>
          <property name="content-type" mutable="true" nullable="true"/>
          <property name="inferred" mutable="true" nullable="true"/>
          <property name="expiry-time" mutable="true" nullable="true"/>
          <property name="creation-time" mutable="true" nullable="true"/>
        </group>

        <group name="transfer-headers" title="Transfer headers">
          <link href="http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-header">AMQP spec</link>
          
          <property name="durable" value="false" type="boolean" mutable="true">
            Durability requirement.  The durable property indicates
            that the message should be held durably by any
            intermediaries taking responsibility for the message.  A
            durable message is saved even if the intermediary is
            unexpectedly terminated and restarted.
          </property>

          <property name="priority" value="4" mutable="true" type="integer" nullable="true">
            Relative message priority.  Higher numbers indciate higher
            priority.
          </property>

          <property name="ttl" mutable="true" type="integer" nullable="true">
            The time to live.  The message must be discarded after
            'ttl' milliseconds.
          </property>

          <property name="first-acquirer" type="boolean" mutable="true" nullable="true">
            True if the recipient is first to acquire the message.
          </property>

          <property name="delivery-count" type="integer" mutable="true">
            The number of prior unsuccessful delivery attempts.
          </property>
        </group>

        <group name="message-groups" title="Message groups">
          <property name="group-id" mutable="true" nullable="true"/>
          <property name="group-sequence" mutable="true" nullable="true"/>
          <property name="reply-to-group-id" mutable="true" nullable="true"/>
        </group>

        <group name="extended-attributes">
          <property name="application-properties" type="map"/>
          <property name="delivery-annotations" type="map"/>
          <property name="message-annotations" type="map"/>
          <property name="footer" type="map"/>
        </group>
      </class>
    </group>

    <group name="connection-options" title="Connection options">
      <class name="connection-option">
        The base class for connection options.

        <link node="@/proton/core/connection"/>
        <link node="@/proton/core/container/connect"/>
        <link node="@/proton/core/container/listen"/>
      </class>
      
      <class name="reconnect">
        Automatically reestablish the connection.
      </class>
      
      <class name="heartbeats">
        Periodically send empty frames to test that the connection is
        alive.
      </class>
    </group>
    
    <group name="link-options" title="Link options">
      <class name="link-option">
        The base class for link options.

        <link node="@/proton/core/link"/>
        <link node="@/proton/core/container/open-receiver"/>
        <link node="@/proton/core/container/open-sender"/>
      </class>

      <class name="at-most-once" type="@link-option">
        Unreliable delivery.  The sender settles the message as soon
        as it sends it.  If the connection is lost before the message
        is received, the message will not be delivered.

        <link href="{{{{site_url}}}}/delivery-guarantees.html">Delivery guarantees</link>
      </class>

      <class name="at-least-once" type="@link-option">
        Reliable delivery.  The receiver accepts and settles the
        message on receipt.  If the connection is lost before the
        sender is informed of the settlement, then the delivery is
        considered in-doubt and will be retried.  This will ensure it
        eventually gets delivered, provided the connection and link
        can be reestablished.  It may, however, be delivered multiple
        times.

        <link href="{{{{site_url}}}}/delivery-guarantees.html">Delivery guarantees</link>
      </class>

      <class name="exactly-once" type="@link-option">
        Reliable delivery with no duplicates.  The receiver accepts
        the message but doesn't settle it.  The sender settles once it
        is aware that the receiver accepted it.  In this way the
        receiver retains knowledge of an accepted message until it is
        sure the sender knows it has been accepted.  If the connection
        is lost before settlement, the receiver informs the sender of
        all the unsettled deliveries it knows about, and from this the
        sender can deduce which need to be redelivered. The sender
        likewise informs the receiver which deliveries it knows about,
        from which the receiver can deduce which have already been
        settled.

        <link href="{{{{site_url}}}}/delivery-guarantees.html">Delivery guarantees</link>
      </class>
      
      <class name="dynamic-node-properties" type="@link-option">
        Control the properties of nodes created on demand.

        **XXX lifetime-policy, supported-dist-modes**
        
        <link href="http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-node-properties"/>
      </class>

      <class name="filter" type="@link-option"/>
      <class name="durable-subscription" type="@link-option"/>
      <class name="move" type="@link-option"/>
      <class name="copy" type="@link-option"/>
      <class name="browse" type="@copy"/>
    </group>

    <group name="event-processing">
      <class name="event">
        The Proton event object.

        <group name="basic">
          <property name="event-loop" type="@event-loop" value="[instance]"/>
          <property name="container" type="@container" value="[instance]"/>
          <property name="connection" type="@connection" value="[instance]" nullable="true"/>
          <property name="session" type="@session" value="[instance]" nullable="true"/>
          <property name="link" type="@link" value="[instance]" nullable="true"/>
          <property name="receiver" type="@receiver" value="[instance]" nullable="true"/>
          <property name="sender" type="@sender" value="[instance]" nullable="true"/>
          <property name="delivery" type="@delivery" value="[instance]" nullable="true"/>
          <property name="transport" type="@transport" value="[instance]" nullable="true"/>
        </group>
      </class>
      
      <class name="event-handler">
        The base event handler.

        [?] What is a child event handler?  When does it get called?

        <group name="basic"> <!-- XXX somehow this only works with basic -->
          <method name="add-child">
            Add a child event handler.

            <input name="child" type="@event-handler"/>
          </method>

          <method name="on-unhandled">
            Fallback event handling.
            
            Called if an event handler function is not overriden to
            handle an event.

            <input name="event" type="@event"/>
          </method>

          <method name="on-unhandled-error">
            Fallback error handling.
            
            Called if an error handler function is not overriden to
            handle an error.
            
            <input name="event" type="@event"/>
          </method>
        </group>
      </class>

      <class name="event-loop">
        Dispatches events to event handlers.

        <group name="basic">
          <property name="container" value="[instance]" type="@container">
            The container associated with this event loop.
          </property>
        </group>
      </class>
      
      <class name="connection-engine" type="@event-loop">
        An event loop for integrating with an existing IO framework.
        
        A connection-engine is an `event-loop` that manages a single
        AMQP connection.  It provides a simple bytes in/bytes out
        interface. Incoming AMQP bytes from any kind of data
        connection are fed into the engine and processed to dispatch
        events to an `event-handler`. The resulting AMQP output data
        is available from the engine and can sent back over the
        connection.

        The engine does no IO of its own. It assumes a two-way flow of
        bytes over some externally-managed "connection". The
        "connection" could be a socket managed by `select`, `poll`,
        `epoll` or some other mechanism, or it could be something else
        such as an RDMA connection, a shared-memory buffer or a Unix
        pipe.

        The engine is an alternative `event-loop` to the container
        **[XXX revisit: substitute reactor?]**. The container is
        easier to use in single-threaded, standalone applications that
        want to use standard socket connections. The engine can be
        embedding into any existing IO framework for any type of IO.

        The application is coded the same way for engine or container:
        you implement `event-handler`. Handlers attached to an engine
        will receive `transport`, `connection`, `session`, `link`, and
        `message` events. They will not receive `reactor`,
        `selectable`, or `timer` events, the engine assumes those are
        managed externally.

        *Thread safety* - A single engine instance cannot be called
        concurrently, but different engine instances can be processed
        concurrently in separate threads.
      </class>
      
      <class name="messaging-handler" type="@event-handler">
        The standard messaging event handler.
        
        <group name="basic">
          <method name="on-start">
            The event loop is starting.
            
            <input name="event" type="@event"/>
          </method>

          <method name="on-message">
            A message is received.
            
            <input name="event" type="@event"/>
          </method>

          <method name="on-sendable">
            A message can be sent.
            
            The sender has credit and messages can therefore be
            transferred.
            
            <input name="event" type="@event"/>
          </method>

          <method name="on-disconnect">
            A network connection was disconnected.
            
            <input name="event" type="@event"/>
          </method>
        </group>

        <group name="endpoint-state">
          <method name="on-connection-open">
            The remote peer opened the connection.
            
            <input name="event" type="@event"/>
          </method>

          <method name="on-connection-close">
            The remote peer closed the connection.
            
            <input name="event" type="@event"/>
          </method>
            
          <method name="on-connection-error">
            The remote peer closed the connection with an error
            condition.
            
            <input name="event" type="@event"/>
          </method>

          <method name="on-session-open">
            The remote peer opened the session.
            
            <input name="event" type="@event"/>
          </method>
          
          <method name="on-session-close">
            The remote peer closed the session.
            
            <input name="event" type="@event"/>
          </method>

          <method name="on-session-error">
            The remote peer closed the session with an error
            condition.
            
            <input name="event" type="@event"/>
          </method>

          <method name="on-link-open">
            The remote peer opened the link.
            
            <input name="event" type="@event"/>
          </method>
           
          <method name="on-link-close">
            The remote peer closed the link.
            
            <input name="event" type="@event"/>
          </method>
           
          <method name="on-link-error">
            The remote peer closed the link with an error condition.
            
            <input name="event" type="@event"/>
          </method>
        </group>

        <group name="delivery-state">
          <method name="on-delivery-accept">
            The remote peer accepted an outgoing message.
            
            <input name="event" type="@event"/>
          </method>
          
          <method name="on-delivery-reject">
            The remote peer rejected an outgoing message.

            XXX error condition
            
            <input name="event" type="@event"/>
          </method>
          
          <method name="on-delivery-release">
            The remote peer released an outgoing message.  Note that
            this may be in response to either the RELEASE or MODIFIED
            state as defined by the AMQP specification.
            
            <input name="event" type="@event"/>
          </method>
          
          <method name="on-delivery-settle">
            The remote peer settled an outgoing message.  This is the
            point at which it should never be retransmitted.
            
            <input name="event" type="@event"/>
          </method>
        </group>

        <group name="transactions">
          <method name="on-transaction-commit">
            The remote peer has committed a transaction.
            
            <input name="event" type="@event"/>
          </method>

          <method name="on-transaction-abort">
            The remote peer has aborted a transaction.
            
            <input name="event" type="@event"/>
          </method>

          <method name="on-transaction-declare">
            The remote peer has declared a transaction.
            
            <input name="event" type="@event"/>
          </method>
        </group>
      </class>
    </group>

    <group name="transport" title="Transport entities">
      <class name="transport"/>
      <class name="transport-error"/>
      <class name="ssl"/>
      <class name="ssl-certificate"/>
      <class name="ssl-domain"/>
      <class name="ssl-error"/>
      <class name="sasl"/>
    </group>

    <group name="errors" title="Error handling">
      <class name="proton-error"/>
      <class name="timeout-error"/>
    </group>

    <group name="utilities" title="Important utilities">
      <class name="duration"/>
      <class name="url"/>
      <class name="url-error"/>
    </group>
  </module>

  <module name="amqp">
    AMQP data encoding and decoding. For typical Proton-based
    applications, these classes will not be used directly.

    <annotation name="requires">internal</annotation>
    <annotation name="class-link-text-template">AMQP definition</annotation>
    <annotation name="class-link-href-template">https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-types-v1.0-os.html#type-{}</annotation>
    <annotation name="class-link-function">_gen_amqp_type_link</annotation>

    <group name="basic-scalar-types" title="Scalar data types">
      <class name="amqp-null">An empty value.</class>
      <class name="amqp-boolean">A true or false value.</class>
      <class name="amqp-char">A single Unicode character.</class>
      <class name="amqp-string">A sequence of Unicode characters.</class>
      <class name="amqp-binary">A sequence of bytes.</class>
      <class name="amqp-float">A 32-bit floating point number.</class>
      <class name="amqp-double">A 64-bit floating point number.</class>
      <class name="amqp-byte">A signed 8-bit integer.</class>
      <class name="amqp-short">A signed 16-bit integer.</class>
      <class name="amqp-int">A signed 32-bit integer.</class>
      <class name="amqp-long">A signed 64-bit integer.</class>
      <class name="amqp-ubyte">An unsigned 8-bit integer.</class>
      <class name="amqp-ushort">An unsigned 16-bit integer.</class>
      <class name="amqp-uint">An unsigned 32-bit integer.</class>
      <class name="amqp-ulong">An unsigned 64-bit integer.</class>
    </group>

    <group name="composite-types" title="Composite data types">
      <class name="amqp-array">A sequence of values of a single type.</class>
      <class name="amqp-list">A sequence of values of variable type.</class>
      <class name="amqp-map">A mapping from distinct keys to values.</class>
    </group>

    <group name="semantic-types" title="Semantic data types">
      <class name="amqp-symbol">A symbolic value from a constrained domain.</class>
      <class name="amqp-timestamp">An absolute point in time.</class>
      <class name="amqp-uuid">A universally unique identifier.</class>
    </group>

    <group name="decimal-types" title="Decimal floating point data types">
      <link href="https://en.wikipedia.org/wiki/Decimal_floating_point">Decimal floating point</link>
      
      <class name="amqp-decimal32">A 32-bit decimal floating point number.</class>
      <class name="amqp-decimal64">A 64-bit decimal floating point number.</class>
      <class name="amqp-decimal128">A 128-bit decimal floating point number.</class>
    </group>

    <group name="codec" title="Encoding and decoding">
      <class name="value"></class>
      <class name="value-type"></class>
      <class name="encoder"></class>
      <class name="encode-error"></class>
      <class name="decoder"></class>
      <class name="decode-error"></class>
    </group>
  </module>
  
  <module name="internal">
    API internals and language extensions.  These are classes that are
    necessary for the implementation, but not promoted for general
    consumption by API users.
  </module>

  <type name="string"/>
  <type name="boolean"/>
  <type name="integer"/>
  <type name="object"/>
  <type name="list"/>
  <type name="map"/>

  <group-definition name="basic" title="Basic properties and methods">
  </group-definition>

  <group-definition name="link-operations" title="Link operations">
  </group-definition>

  <group-definition name="object-relations" title="Object relations">
    Properties for navigating to related objects and methods for
    creating new ones.
  </group-definition>

  <group-definition name="endpoint-state" title="Endpoint state">
  </group-definition>

  <group-definition name="delivery-state" title="Delivery state">
  </group-definition>

  <group-definition name="event-processing" title="Event processing">
  </group-definition>

  <group-definition name="error-handling" title="Error handling">
  </group-definition>

  <group-definition name="flow-control" title="Flow control">
  </group-definition>

  <group-definition name="transactions" title="Transactions">
  </group-definition>

  <group-definition name="extended-attributes" title="Extended attributes">
  </group-definition>
</model>
