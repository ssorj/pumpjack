<?xml version="1.0"?>
<model name="proton">
  Qpid Proton is an event-driven messaging API for building clients,
  brokers, and more.  It uses the AMQP 1.0 wire protocol, so it can
  exchange messages with other components that use the same open
  internet standard.  The Proton API is available in many popular
  programming languages.

  <link href="https://qpid.apache.org/proton/index.html">Qpid Proton home</link>
  <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/c/api/">Qpid Proton C</link>
  <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/cpp/api/">Qpid Proton C++</link>
  <link href="https://github.com/apache/qpid-proton/tree/master/proton-c/bindings/go">Qpid Proton Go</link>
  <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/java/api/">Qpid Proton Java</link>
  <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/python/api/">Qpid Proton Python</link>
  
  <module name="core">
    The primary entry point for the event-driven API. Most
    applications will import only this module.

    <annotation name="requires">proton/amqp</annotation>

    <group name="model" title="AMQP model entities">
      <class name="endpoint">
        The base class for session, connection, and link

        <constant name="LOCAL-UNINIT" value="1">
          The local endpoint is uninitialized.
        </constant>

        <constant name="REMOTE-UNINIT" value="8">
          The remote endpoint is uninitialized.
        </constant>

        <constant name="LOCAL-ACTIVE" value="2">
          The local endpoint is active.
        </constant>

        <constant name="REMOTE-ACTIVE" value="16">
          The remote endpoint is active.
        </constant>

        <constant name="LOCAL-CLOSED" value="4">
          The local endpoint is closed.
        </constant>

        <constant name="REMOTE-CLOSED" value="32">
          The remote endpoint is closed.
        </constant>

        <!--
        <constant name="LOCAL-MASK">
          A mask including all LOCAL_ bits (UNINIT, ACTIVE, CLOSED).
        </constant>

        <constant name="REMOTE-MASK">
          A mask including all REMOTE_ bits (UNINIT, ACTIVE, CLOSED).
        </constant>
        -->

        <attribute name="state" type="integer" writeable="false">
          State is a bit mask of state_bit values.

          A state mask is matched against an endpoint as follows: If the
          state mask contains both local and remote flags, then an exact
          match against those flags is performed. If state contains only
          local or only remote flags, then a match occurs if any of the
          local or remote flags are set respectively. XXX Huh?
        </attribute>
      </class>

      <class name="container"/>

      <class name="connection" type="@endpoint">
        <attribute name="default-session" type="@session"/>

        <method name="open">
          Opens a connection.

          In more detail, this moves the local state of the connection
          to the ACTIVE state and triggers an open frame to be sent to
          the peer. A connection is fully active once both peers have
          opened it.

          Not complete until on-connection-opened. XXX
        </method>

        <method name="close"/>

        <method name="create-session" type="@session"/>
        <method name="create-sender" type="@sender"/>
        <method name="create-receiver" type="@receiver"/>

        <!-- <method name="link-head" type="@link"/> -->
      </class>

      <class name="session">
        A session is a collection of links.  XXX need to talk about
        one sequential conversation
        
        <link href="https://qpid.apache.org/releases/qpid-proton-master/proton/cpp/api/classproton_1_1session.html">C++</link>
        
        <attribute name="connection" type="@connection"/>
        <attribute name="incoming-bytes" type="integer"/>
        <attribute name="incoming-capacity" type="integer"/>
        <attribute name="outgoing-bytes" type="integer"/>
        <attribute name="outgoing-window" type="integer"/>

        <method name="open"/>
        <method name="close"/>
        
        <method name="create-receiver" type="@receiver"/>
        <method name="create-sender" type="@sender"/>
      </class>
      
      <class name="session-error"/>
      <class name="link"/>
      <class name="receiver"/>
      <class name="sender"/>
      <class name="terminus"/>
      <class name="condition"/>
      <class name="delivery"/>
      <class name="delivery-state"/>
      <class name="address"/>
      <class name="message"/>
    </group>

    <group name="events" title="Event processing">
      <class name="event"/>
      <class name="event-type"/>
      <class name="collector"/>
      <class name="reactor"/>
      <class name="acceptor"/>
      <class name="timer"/>
      <class name="task"/>
      <class name="selectable"/>
      <class name="general-handler"/>
      <class name="outgoing-message-handler"/>
      <class name="incoming-message-handler"/>
      <class name="transaction-handler"/>
      <class name="transactional-client-handler"/>
    </group>

    <group name="transport" title="Transport entities">
      <class name="transport"/>
      <class name="transport-error"/>
      <class name="ssl"/>
      <class name="ssl-domain"/>
      <class name="ssl-error"/>
      <class name="sasl"/>
    </group>

    <group name="errors" title="Error handling">
      <class name="proton-error"/>
      <class name="timeout-error"/>
    </group>

    <group name="utilities" title="Important utilities">
      <class name="duration"/>
      <class name="url"/>
      <class name="url-error"/>
    </group>
  </module>

  <module name="amqp">
    AMQP data encoding and decoding. For typical Proton-based
    applications, these classes will not be used directly.

    <annotation name="requires">proton/internal</annotation>
  </module>
  
  <module name="internal">
    API internals and language extensions.  These are classes that are
    necessary for the implementation, but not promoted for general
    consumption by API users.
  </module>

  <type name="string"/>
  <type name="boolean"/>
  <type name="integer"/>
  <type name="any"/>
  <type name="class"/>
</model>
